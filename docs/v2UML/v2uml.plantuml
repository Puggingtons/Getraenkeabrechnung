@startuml
class Benutzer {
  Realname realname
  Username Username
  Password password
  Email email
  Konto konto
  Right[] rights
  Getränkeautomat? getränkeautomat
---
  kann sich einloggen
  lesender Zugriff auf eigenen Kontostand
  kann Geld auf das Konto aufladen
  kann sich selbst belasten
}

interface Right {
}

class SelfServiceRight {
  boolean darfSichSelbstAbrechnenUSERRIGHTS
}

class OtherServiceRight {
  boolean darfAndereAbrechnenABRECHNERRIGHTS
---
  kann Abrechnungen durchführen (Einen/Mehrere andere/n Benutzer belasten)
}

class AdministrativeRight {
  boolean darfAdminSachenMachenADMINRIGHTS
---
  kann sich einloggen
  kann Benutzer anlegen
  kann Benutzer löschen
  kann Benutzer bearbeiten
  kann Abrechner anlegen
  kann Abrechner löschen
  kann Abrechner bearbeiten
}

SelfServiceRight --> Right
OtherServiceRight --> Right
AdministrativeRight --> Right

Benutzer *-- Right

class Konto {
  Kontostand kontostand
  x: History????
  void belasten(Betrag betrag)
  void aufladen(Betrag betrag)
}

UsernameValidator *-- Username
PasswordValidator *-- Password

class Drink {
  String name
  Category category
}

class Category {
   String name
   double price 
}

class Position {
  Drink drink
  Menge amount
}

Drink *-- Category
Position *-- Drink
Position *-- Menge

class Abrechnung {
  Position[] positionen
  Benutzer benutzer
}

Abrechnung *-- Position
Abrechnung *-- Benutzer
Abrechnung --* ThirstyCalc

class ThirstyCalc {
  -Benutzer[] benutzer
  -Categorry[] categories
---
  void abrechnen(Abrechnung abrechnung)
  void getränkeklasseHinzufügen(Getränkeklasse getränkeklasse) # darf nur admin
  void geldEinzahlen(Benutzer benutzer, Betrag betrag)
  void benutzerAnlegen(Benutzer benutzer)
  Abrechnung erstelleAbrechnung(Benutzer benutzer, Position[] positionen)
  void login(String eingabe)
}

class Befehl
class LoginBefehl
LoginBefehl --> Befehl

class Befehlsverwaltung
Befehlsverwaltung *-- Befehl

class Realname {
  String title
  String[] firstName
  String lastName
---
  String getName()
darf keine Zahlen enthalten
}

interface ValidatableString {
}

class Username {
  String username
---
  darf keine Leerzeichen enthalten
}

class Password {
  String password
---
darf nicht gelesen werden
}

class Email {
  String email
---
muss "@" enthalten --> https://emailregex.com/ --> Java
}

Username --> ValidatableString
Password --> ValidatableString
Email --> ValidatableString

Benutzer *-- Username
Benutzer *-- Password
Benutzer *-- Email
Benutzer *-- Konto
Benutzer *-- Realname

class Kontostand {
  double kontostand
}

Kontostand --* Konto

class Menge {
  int menge
---
darf nicht 0 oder weniger sein
und muss 1 oder mehr sein
beachte Integer Overflows :) --> Obergrenze bei Abrechnung beachten
}

interface StringValidator {
  ~boolean isValid(ValidatableString string) //abstract
}

class PasswordValidator{
  String PASSWORD_PATTERN
---
  boolean isValid(Password password)
a digit must occur at least once
a lower case letter must occur at least once
an upper case letter must occur at least once
a special character must occur at least once
no whitespace allowed in the entire string
anything, at least eight places though
}


class UsernameValidator{
    String USERNAME_PATTERN
---
    boolean isValid(Username username)
Username consists of alphanumeric characters (a-zA-Z0-9), lowercase, or uppercase.
Username allowed of the dot (.), underscore (_), and hyphen (-).
The dot (.), underscore (_), or hyphen (-) must not be the first or last character.
The dot (.), underscore (_), or hyphen (-) does not appear consecutively, e.g., java..regex
The number of characters must be between 5 to 20.
}

class EmailValidator {
  ---
  boolean isValid(Email email)
}

Email --* EmailValidator

PasswordValidator --> StringValidator
UsernameValidator --> StringValidator
EmailValidator --> StringValidator
StringValidator *-- ValidatableString

ThirstyCalc *-- Benutzer
ThirstyCalc *-- Category

@enduml