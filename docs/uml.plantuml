@startuml uml
/'
Ein paar Plantuml-Beispiele, die der UML Norm nach Wikipedia entsprechen :)
https://de.wikipedia.org/wiki/Klassendiagramm

# Relationen:

Dings <|-- Bumms
  Bumms implementiert das Interface Dings

Kunde <|.. Privatkunde
  Privatkunde spezialisiert Kunde

User *-- Right
  Komposition: Right existiert nicht ohne User. User hat beliebig viele Rights

User o-- Right
  Aggregation: Right existiert auch ohne User. User hat beliebig viele Rights

# Klassenattribute:

-String name
  private String name
+String name
  public String name
#String name
  protected String name
~String name
  package String name
'/

package rights {
  interface Right {
  }

  class SelfServiceRight {
    boolean darfSichSelbstAbrechnenUSERRIGHTS
  }

  class OtherServiceRight {
    boolean darfAndereAbrechnenABRECHNERRIGHTS
    ---
    kann Abrechnungen durchführen (Einen/Mehrere andere/n User belasten)
  }

  class AdministrativeRight {
    boolean darfAdminSachenMachenADMINRIGHTS
    ---
    kann sich einloggen
    kann User anlegen
    kann User löschen
    kann User bearbeiten
    kann Abrechner anlegen
    kann Abrechner löschen
    kann Abrechner bearbeiten
  }

  Right <|.. SelfServiceRight
  Right <|.. OtherServiceRight
  Right <|.. AdministrativeRight
} /' end package: rights '/

package validatableStrings {
  package strings {
    interface ValidatableString {
    }

    class Username {
      -String username
    ---

    ---
      darf keine Leerzeichen enthalten
    }

    class Password {
      -String password
    ---

    ---
    darf nicht gelesen werden
    }

    class Email {
      -String email
    ---

    ---
    muss "@" enthalten --> https://emailregex.com/ --> Java
    }

    class Realname {
      String title
      String[] firstName
      String lastName
      ---
      String getName()
      ---
      darf keine Zahlen enthalten
    }

    ValidatableString <|-- Username
    ValidatableString <|-- Password
    ValidatableString <|-- Email
    ValidatableString <|-- Realname
  } /' end package: validatableStrings.strings '/

  package validators {
    interface StringValidator {
      ---
      {abstract} boolean isValid(ValidatableString string)
    }

    class PasswordValidator {
      -String PASSWORD_PATTERN
      ---
      boolean isValid(Password password)
      ---
      a digit must occur at least once
      a lower case letter must occur at least once
      an upper case letter must occur at least once
      a special character must occur at least once
      no whitespace allowed in the entire string
      anything, at least eight places though
    }


    class UsernameValidator {
      -String USERNAME_PATTERN
      ---
      boolean isValid(Username username)
      ---
      Username consists of alphanumeric characters (a-zA-Z0-9), lowercase, or uppercase.
      Username allowed of the dot (.), underscore (_), and hyphen (-).
      The dot (.), underscore (_), or hyphen (-) must not be the first or last character.
      The dot (.), underscore (_), or hyphen (-) does not appear consecutively, e.g., java..regex
      The number of characters must be between 5 to 20.
    }

    class EmailValidator {
      ---
      boolean isValid(Email email)
    }

    StringValidator <|-- PasswordValidator
    StringValidator <|-- UsernameValidator
    StringValidator <|-- EmailValidator

    ' StringValidator *-- ValidatableString
  } /' end package: validatableStrings.validators '/

  ' EmailValidator *-- Email
  ' UsernameValidator *-- Username
  ' PasswordValidator *-- Password
} /' end package: validatableStrings '/

package user {
  class User {
    ' Realname realname
    ' Username Username
    ' Password password
    ' Email email
    ' Account konto
    ' Right[] rights
    ---

    ---
    kann sich einloggen
    lesender Zugriff auf eigenen Kontostand
    kann Geld auf das Konto aufladen
    kann sich selbst belasten
  }
} /' end package: user '/

package banking {
  package numbers {
    interface Amount {

    }
    class MoneyAmount {

    }

    class PositionAmount {
      int menge
      ---
      ---
      darf nicht 0 oder weniger sein
      und muss 1 oder mehr sein
      beachte Integer Overflows :) --> Obergrenze bei Abrechnung beachtenas Objekt benutzt ein anderes Objekt
    }

    Amount <|-- MoneyAmount
    Amount <|-- PositionAmount
  } /' end package: banking.numbers '/

  package invoicing {
    class Drink {
      String name
      ' Category category
    }

    class Category {
      String name
      double price 
    }

    class Position {
      ' Drink drink
      ' Menge amount
    }

    Drink "1" o-- Category
    Position "1" o-- Drink
    Position "1" *-- PositionAmount

    class Invoice {
      ' Position[] positionen
      ' User benutzer
    }

    Invoice "n" *-- Position
    Invoice "1" *-- User
  } /' end package: banking.invoicing '/

  class Account {
    x: History????
    ---
    void belasten(MoneyAmount amount)
    void aufladen(MoneyAmount amount)
  }

  Account "1" *-- MoneyAmount : < balance
} /' end package: banking '/

package io {
    package input {
        package result {
            +class Result<T> {
                {static} Result<T> some(T value)
                {static} Result<T> none()
                {static} Result<T> help()
                + T getValue()
                + boolean hasValue()
                + boolean isNone()
                + boolean isHelp()
                + boolean isAbort()
            }

            enum ResultState {
                Value
                Abort
                Help
            }

            Result "1" *-- ResultState
        } /' end package: io.input.result '/

        abstract class Input<T> {
            # Input(String prompt)
            # Input(InputReader reader, OutputWriter writer, String prompt)
            + void setReader(Reader reader)
            + void setWriter(Writer writer)
            # String readInput()
            # boolean isHelp(String str)
            # void print(String str)
            # void println(String str)
            # Result<T> prompt()
            {abstract} Result<T> getResult(String input)
        }

        +class FloatInput extends Input<Float> {
            + FloatInput(String prompt)
            Result<Float> getResult(String input)
        }

        +class NumberInput extends Input<Integer> {
            + NumberInput(String prompt)
            Result<Integer> getResult(String input)
        }

        +class StringInput extends Input<String> {
            + StringInput(String prompt)
            Result<String> getResult(String input)
        }
    } /' end package: io.input '/

    package interactions {
        package event {
            +class InteractionEventSource<T> {
                + InteractionEventSource()
                + void onSuccess(Consumer<T> onSuccess)
                + void onFailure(Consumer<Void> onFailure)
                # void success(T t)
                # void failure()
            }
        } /' end: io.interactions.event '/

        +interface Interaction<T> {
            String DEFAULT_PROMPT
            void explain()
            T run()
        }

        +class CreateUserInteraction extends event.InteractionEventSource<User> implements Interaction<User> {
            + void explain()
            + User run()
        }

        +class LoginInteraction extends event.InteractionEventSource<User> implements Interaction<User> {
            + void explain()
            + User run()
        }

        +class LogoutInteraction extends event.InteractionEventSource<Void> implements Interaction<Void> {
            + void explain()
            + User run()
        }

        +class SelectInteraction extends event.InteractionEventSource<String> implements Interaction<String> {
            + SelectInteraction()
            + SelectInteraction(Map<String, String> options)
            + SelectInteraction(Map<String, String> options, String prompt)
            + void pushOption(String option)
            + void addOption(String key, String option)
            + void explain()
            + String run()
        }

        +class StringInputInteraction extends event.InteractionEventSource<String> implements Interaction<String> {
            + StringInputInteraction(String msg)
            + StringInputInteraction(String msg, String prompt)
            + void explain()
            + String run()
        }

        +class MainInteraction implements Interaction<Void> {
            + MainInteraction(Getraenkeabrechnung getraenkeabrechnung) /' todo: rename this to ThirstyCalc '/
            + void addInteraction(String key, String description, Interaction interaction)
            + void explain()
            + Void run()
        }

        MainInteraction "*" o-- Interaction
        MainInteraction "1" *-- SelectInteraction
    } /' end package: io.interactions '/

    package reader {
        +interface Reader {
            String readLine()
        }

        +class InputReader implements Reader {
            + InputReader()
            + InputReader(InputStream stream)
            + String readLine()
        }
    } /' end package: io.reader '/

    package writer {
        +interface Writer {
            void writeLine(String line)
            void write(String str)
        }

        +class OutputWriter implements Writer {
            + OutputWriter()
            + OutputWriter(PrintStream out)
            + void writeLine(String line)
            + void write(String str)
        }
    } /' end package: io.writer '/

    Input "1" o-- Reader
    Input "1" o-- Writer
    Input *-- Result

    /' todo: don't know it these relations need to be in the uml '/
    SelectInteraction "1" *-- StringInput
    StringInputInteraction "1" *-- StringInput
    LoginInteraction "2" *-- StringInput
    CreateUserInteraction "3" *-- StringInput

} /' end package: io '/

class ThirstyCalc {
  ' -User[] benutzer
  ' -Category[] categories
---
  void abrechnen(Abrechnung abrechnung)
  void getränkeklasseHinzufügen(Getränkeklasse getränkeklasse) # darf nur admin
  void geldEinzahlen(User benutzer, Betrag betrag)
  void benutzerAnlegen(User benutzer)
  Abrechnung erstelleAbrechnung(User benutzer, Position[] positionen)
  void login(String eingabe)
}

User "n" *-- Right
User "1" o-- Username
User "1" o-- Password
User "1" o-- Email
User "1" o-- Account
User "1" o-- Realname

ThirstyCalc *-- Invoice
ThirstyCalc "n" *-- User
ThirstyCalc "n" *-- Category

MainInteraction "1" o-- ThirstyCalc

@enduml