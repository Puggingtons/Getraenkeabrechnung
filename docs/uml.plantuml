@startuml uml
'!pragma layout smetana
/'
Ein paar Plantuml-Beispiele, die der UML Norm nach Wikipedia entsprechen :)
https://de.wikipedia.org/wiki/Klassendiagramm

# Relationen:

Dings <|-- Bumms
  Bumms implementiert das Interface Dings

Kunde <|.. Privatkunde
  Privatkunde spezialisiert Kunde

User *-- Right
  Komposition: Right existiert nicht ohne User. User hat beliebig viele Rights

User o-- Right
  Aggregation: Right existiert auch ohne User. User hat beliebig viele Rights

# Klassenattribute:

-String name
  private String name
+String name
  public String name
#String name
  protected String name
~String name
  package String name
'/

package banking {
    +class Account {
        +Account(Username username)
        +Username GetUsername()
        +Money getBalance()
        +void deposit(Money amount)
        +Money charge(Money amount)
        +boolean isEmpty()
        +boolean equals(Object o)
    }

    +exception AccountDoesNotExistException {
        +AccountDoesNotExistException(String message)
    }

    +exception NotEnoughMoneyException {
        +NotEnoughMoneyException(String message)
    }
} /' end package: banking '/

package data {
    package numbers {
        +class Money {
            + Money()
            + Money(String amount)
            + Money(BigDecimal amount)
            + BidDecimal getAmount()
            + Money add(Money money)
            + Money subtract(Money money)
            + Money multiply(Money money)
            + String toString()
            + boolean equals(Object o)
        }
    } /'end package: data.numbers '/

    +class AccountDatabase {
        + AccountDatabase()
        + Account[] getAccounts()
        + void createAccount(User user)
        + Account getAccountOfUser(User user)
        + boolean checkIfAccountBalanceIsZero(User user)
        + void removeAccount(User user)
        + void load(String path)
        + void load(Path path)
        + void save(String path)
        + void save(Path path)
    }

    +class DrinkDatabase {
        + DrinkDatabase()
        + DrinkOption[] getDrinkOptions()
        + void addDrinkOption(DrinkOption drinkOption)
        + void load(String path)
        + void load(Path path)
        + void save(String path)
        + void save(Path path)
        + void createNewDrinkOption(DrinkOption drinkOption)
        + {static} boolean drinkOptionExists(DrinkName drinkName)
    }

    +class Savable<T> {
        + Savable(T t)
        + T get()
        + void load(String path, TypeToken<T> typeToken)
        + void load(Path path, TypeToken<T> typeToken)
        + void save(String path)
        + void save(Path path)
    }

    +class UserDatabase {
        + UserDatabase()
        + User[] getUsers()
        + User getUser(Username username)
        + void addUser(User user)
        + void removeUser(User user)
        + void deleteUser(User user)
        + void registerNewUser(User user)
        + boolean updateUser(User updatedUser)
        + boolean userExists(Username username)
        + void load(String path)
        + void load(Path path)
        + void save(String path)
        + void save(Path path)
    }

    +exception UserDoesNotExistException {
        + UserDoesNotExistException(String message)
        + UserDoesNotExistException(String message, Throwable cause)
        + UserDoesNotExistException(Throwable cause)
    }
} /' end package: data '/

package io {
    package input {
        package result {
            +class Result<T> {
                + {static} Result<T> some(T value)
                + {static} Result<T> none()
                + {static} Result<T> help()
                + T getValue()
                + boolean hasValue()
                + boolean isNone()
                + boolean isHelp()
                + boolean isAbort()
            }

            enum ResultState {
                Value
                Abort
                Help
            }
        } /' end package: io.input.result '/

        +class BooleanInput extends Input<Boolean> {
            + BooleanInput(String prompt)
            Result<Boolean> getResult(String input)
        }

        +class FloatInput extends Input<Float> {
            + FloatInput(String prompt)
            Result<Float> getResult(String input)
        }

        abstract class Input<T> {
            # Input()
            # Input(String prompt)
            # Input(InputReader reader, OutputWriter writer, String prompt)
            + void setReader(Reader reader)
            + void setWriter(Writer writer)
            # String readInput()
            # boolean isHelp(String str)
            # void print(String str)
            # void println(String str)
            # Result<T> prompt()
            {abstract} Result<T> getResult(String input)
        }

        +class NumberInput extends Input<Integer> {
            + NumberInput(String prompt)
            + NumberInput(String prompt, int minValue, int maxValue)
            Result<Integer> getResult(String input)
        }

        +class StringInput extends Input<String> {
            + StringInput(String prompt)
            Result<String> getResult(String input)
        }
    } /' end package: io.input '/

    package interactions {
        package event {
            +class InteractionEventSource<T> {
                + InteractionEventSource()
                + void onSuccess(Consumer<T> onSuccess)
                # void success(T t)
                + void onFailure(Consumer<Void> onFailure)
                # void failure()
            }
        } /' end: io.interactions.event '/

        +class AddRightsInteraction extends Interaction<User> {
            + AddRightsInteraction(UserDatabase userDatabase)
            String usage()
            + void execute()
        }

        +class ChangePasswordInteraction extends Interaction<User> {
            + ChangePasswordInteraction(User user, UserDatabase userDatabase)
            String usage()
            + void execute()
        }

        +class CheckBalanceInteraction extends Interaction<Money> {
            + CheckBalanceInteraction(Account account)
            String usage()
            # void execute()
        }

        +class CreateDrinkOptionInteraction extends Interaction<DrinkOption> {
            + class CreateDrinkOptionInteraction(ThirstyCalc thirstyCalc)
            String usage()
            # void execute()
        }

        +class CreateUserInteraction extends Interaction<User> {
            + CreateUserInteraction(UserDatabase userDatabase)
            String usage()
            + void execute()
        }

        +class DeleteUserInteraction extends Interaction<User> {
            + DeleteUserInteraction(UserDatabase userDatabase, AccountDatabase accountDatabase, ThirstyCalc thirstyCalc)
            String usage()
            + void execute()
        }

        +class ExitInteraction extends Interaction<Void> {
            String usage()
            # void execute()
        }

        +abstract class Interaction<T> extends InteractionEventSource<T> {
            {static} String DEFAULT_PROMPT
            + Interaction()
            + void explain()
            {abstract} String usage()
            + void run()
            # {abstract} void execute()
            # void stop()
        }

        +class LoggedInUserInteractionFactory {
            +LoggedInUserInteractionFactory(ThirstyCalc thirstyCalc)
            +Interaction<?> build()
        }

        +class LoginInteraction extends Interaction<User> {
            + LoginInteraction(UserDatabase userDatabase)
            String usage()
            + void execute()
        }

        +class LogoutInteraction extends Interaction<Void> {
            String usage()
            + void execute()
        }

        +class MainInteraction extends MenuInteraction {
            +MainInteraction(ThirstyCalc thirstyCalc)
        }

        +class MenuInteraction extends Interaction<Void> {
            + MenuInteraction()
            String usage()
            + void execute()
            + void addInteraction(String key, String description, Interaction<?> interaction)
        }

        +class RegisterUserInteraction extends Interaction<User> {
            + RegisterUserInteraction(UserDatabase userDatabase)
            String usage()
            + void execute()
        }

        +class SelectInteraction extends Interaction<String> {
            + SelectInteraction()
            + SelectInteraction(Map<String, String> options)
            + SelectInteraction(Map<String, String> options, String prompt)
            + void pushOption(String option)
            + void addOption(String key, String option)
            String usage()
            + void execute()
        }

        +class StringInputInteraction extends Interaction<String> {
            + StringInputInteraction(String msg)
            + StringInputInteraction(String msg, String prompt)
            String usage()
            + void execute()
        }
    } /' end package: io.interactions '/

    package reader {
        +interface Reader {
            String readLine()
        }

        +class InputReader implements Reader {
            + InputReader()
            + InputReader(InputStream stream)
            + String readLine()
        }
    } /' end package: io.reader '/

    package writer {
        +interface Writer {
            void writeLine(String line)
            void write(String str)
        }

        +class OutputWriter implements Writer {
            + OutputWriter()
            + OutputWriter(PrintStream out)
            + void writeLine(String line)
            + void write(String str)
        }
    } /' end package: io.writer '/
} /' end package: io '/

package logging {
    package logwriter {
        +class FileLogWriter implements LogWriter {
            + FileLogWriter(File file)
            + void write(String message)
        }

        +interface LogWriter {
            void write(String message)
        }

        +class PrintStreamLogWriter implements LogWriter {
            + PrintStreamLogWriter(PrintStream printStream)
            + void write(String message)
        }
    } /' end package: logwriter '/

    +class ClassLogger implements Logger {
        + ClassLogger(Class clazz, Logger logger)
        + void log(String message)
        + Logger getInnerLogger()
    }

    +interface Logger {
        void log(String message)
        Logger getInnerLogger()
    }

    +class LoggerFactory {
        + LoggerFactory()
        + LoggerFactory(LogWriter logWriter)
        + LoggerFactory(Logger logger)
        + LoggerFactory addUserLogger(User user)
        + LoggerFactory addTimeLogger()
        + LoggerFactory addClassLogger(Class clazz)
        + Logger build()
        + Logger defaultUserLogger(User user)
        + Logger defaultTimeLogger()
    }

    +class LogWriterLoggerAdapter implements Logger {
        + LogWriterLoggerAdapter(LogWriter logWriter)
        + void log(String message)
        + Logger getInnerLogger()
    }

    class TimeLogger implements Logger {
        + TimeLogger(Logger logger)
        + void setTimeOnce(LocalDateTime time)
        + void log(String message)
        + Logger getInnerLogger()
    }

    class UserLogger implements Logger {
        + UserLogger(User user, Logger logger)
        + void setUser(User user)
        + void log(String message)
        + Logger getInnerLogger()
    }
} /' end package: logging '/

package rights {
    +enum Right {
        CAN_CREATE_NEW_USER
        CAN_SELF_INVOICE
        CAN_DELETE_USER
        CAN_CREATE_DRINK
        CAN_ADD_RIGHTS
    }

    +class AdminRights {
        + AdminRights()
        + void giveTo(User user)
    }
} /' end package: rights '/

package state {
    +class ApplicationState {
        + ApplicationState()
        + void setLoggedInUser(User user)
        + User getLoggedInUser()
        + void clearLoggedInUser()
        + boolean isLoggedIn()
    }
} /' end package: state '/

/'##########################################################################'/

package validatableStrings {
  package strings {
    interface ValidatableString {
    }

    class Username {
      -String username
    ---

    ---
      darf keine Leerzeichen enthalten
    }

    class Password {
      -String password
    ---

    ---
    darf nicht gelesen werden
    }

    class Email {
      -String email
    ---

    ---
    muss "@" enthalten --> https://emailregex.com/ --> Java
    }

    class Realname {
      String title
      String[] firstName
      String lastName
      ---
      String getName()
      ---
      darf keine Zahlen enthalten
    }

    ValidatableString <|-- Username
    ValidatableString <|-- Password
    ValidatableString <|-- Email
    ValidatableString <|-- Realname
  } /' end package: validatableStrings.strings '/

  package validators {
    interface StringValidator {
      ---
      {abstract} boolean isValid(ValidatableString string)
    }

    class PasswordValidator {
      -String PASSWORD_PATTERN
      ---
      boolean isValid(Password password)
      ---
      a digit must occur at least once
      a lower case letter must occur at least once
      an upper case letter must occur at least once
      a special character must occur at least once
      no whitespace allowed in the entire string
      anything, at least eight places though
    }


    class UsernameValidator {
      -String USERNAME_PATTERN
      ---
      boolean isValid(Username username)
      ---
      Username consists of alphanumeric characters (a-zA-Z0-9), lowercase, or uppercase.
      Username allowed of the dot (.), underscore (_), and hyphen (-).
      The dot (.), underscore (_), or hyphen (-) must not be the first or last character.
      The dot (.), underscore (_), or hyphen (-) does not appear consecutively, e.g., java..regex
      The number of characters must be between 5 to 20.
    }

    class EmailValidator {
      ---
      boolean isValid(Email email)
    }

    StringValidator <|-- PasswordValidator
    StringValidator <|-- UsernameValidator
    StringValidator <|-- EmailValidator

    ' StringValidator *-- ValidatableString
  } /' end package: validatableStrings.validators '/

  ' EmailValidator *-- Email
  ' UsernameValidator *-- Username
  ' PasswordValidator *-- Password
} /' end package: validatableStrings '/

package user {
  class User {
    ' Realname realname
    ' Username Username
    ' Password password
    ' Email email
    ' Account konto
    ' Right[] rights
    ---

    ---
    kann sich einloggen
    lesender Zugriff auf eigenen Kontostand
    kann Geld auf das Konto aufladen
    kann sich selbst belasten
  }
} /' end package: user '/

class ThirstyCalc {
  ' -User[] benutzer
  ' -Category[] categories
---
'  void abrechnen(Abrechnung abrechnung)
'  void getränkeklasseHinzufügen(Getränkeklasse getränkeklasse) # darf nur admin
'  void geldEinzahlen(User benutzer, Betrag betrag)
'  void benutzerAnlegen(User benutzer)
'  Abrechnung erstelleAbrechnung(User benutzer, Position[] positionen)
    ThirstyCalc()
    void login(String eingabe)
    void logout()
    void greet()
    User getUser()
    UserDatabase getUserDatabase()
}

User "n" *-- Right
User "1" o-- Username
User "1" o-- Password
User "1" o-- Email
User "1" o-- Account
User "1" o-- Realname

ThirstyCalc *-- Invoice
ThirstyCalc "n" *-- User
ThirstyCalc "n" *-- Category
ThirstyCalc "1" *-- UserDatabase
ThirstyCalc "1" *-- Logger
ThirstyCalc --> LoggerFactory
MainInteraction "1" o-- ThirstyCalc

/'##########################################################################'/

Account "1" o-- Username
Account "1" *-- Money
Account --> NotEnoughMoneyException /' usage? '/

AccountDatabase "n" *-- Account
AccountDatabase --> User /' usage? '/
AccountDatabase "1" *-- Savable
DrinkDatabase "n" *-- DrinkOption
DrinkDatabase --> DrinkName /' usage? '/
DrinkDatabase "1" *-- Savable
UserDatabase "n" *-- User
UserDatabase --> Username /' usage? '/
UserDatabase "1" *-- Savable

Result "1" *-- ResultState
BooleanInput --> Result /' usage? '/
FloatInput --> Result /' usage? '/
Input  --> Result /' usage? '/
Input "1" o-- Reader
Input "1" o-- Writer
NumberInput --> Result /' usage? '/
StringInput --> Result /' usage? '/

' InteractionEventSource "n" o-- Consumer : onSuccessConsumers
InteractionEventSource "n" o-- Consumer : onFailureConsumers

AddRightsInteraction "2" *-- StringInput
AddRightsInteraction "1" o-- UserDatabase
AddRightsInteraction --> Username /' usage? '/
AddRightsInteraction --> Right /' usage? '/
ChangePasswordInteraction "3" *-- StringInput
ChangePasswordInteraction "1" o-- User
ChangePasswordInteraction "1" o-- UserDatabase
ChangePasswordInteraction --> Password
CheckBalanceInteraction "1" o-- Account
CreateDrinkOptionInteraction "2" *-- StringInput
CreateDrinkOptionInteraction "1" o-- ThirstyCalc
CreateDrinkOptionInteraction --> DrinkName /' usage? '/
CreateDrinkOptionInteraction --> DrinkOption /' usage? '/
CreateDrinkOptionInteraction --> ColorName /' usage? '/
CreateUserInteraction "3" *-- StringInput
CreateUserInteraction "1" *-- BooleanInput
CreateUserInteraction "1" o-- UserDatabase
CreateUserInteraction --> UsernameValidator
CreateUserInteraction --> PasswordValidator
CreateUserInteraction --> User /' usage? '/
CreateUserInteraction --> AdminRights /' usage? '/
DeleteUserInteraction "2" *-- StringInput
DeleteUserInteraction "1" o-- UserDatabase
DeleteUserInteraction "1" o-- AccountDatabase
DeleteUserInteraction "1" o-- ThirstyCalc
DeleteUserInteraction --> Username /' usage? '/
DeleteUserInteraction --> User /' usage? '/
LoggedInUserInteractionFactory "1" o-- ThirstyCalc
LoggedInUserInteractionFactory "1" *-- MenuInteraction
LoggedInUserInteractionFactory --> LogoutInteraction /' usage? '/
LoggedInUserInteractionFactory --> ChangePasswordInteraction /' usage? '/
LoggedInUserInteractionFactory --> CheckBalanceInteraction /' usage? '/
LoggedInUserInteractionFactory --> CreateUserInteraction /' usage? '/
LoggedInUserInteractionFactory --> CreateDrinkOptionInteraction /' usage? '/
LoggedInUserInteractionFactory --> DeleteUserInteraction /' usage? '/
LoggedInUserInteractionFactory --> AddRightsInteraction /' usage? '/
LoginInteraction "2" *-- StringInput
LoginInteraction "1" o-- UserDatabase
LoginInteraction --> Username /' usage? '/
LoginInteraction --> User /' usage? '/
LoginInteraction --> Password /' usage? '/
LoginInteraction --> PasswordManagementException /' usage? '/
MainInteraction "1" o-- ThirstyCalc
MainInteraction --> ExitInteraction /' usage? '/
MainInteraction --> RegisterUserInteraction /' usage? '/
MainInteraction --> LoginInteraction /' usage? '/
MainInteraction --> LoggedInUserInteractionFactory /' usage? '/
MenuInteraction "n" o-- Interaction
MenuInteraction "1" *-- SelectInteraction
RegisterUserInteraction "3" *-- StringInput
RegisterUserInteraction "1" o-- UserDatabase
RegisterUserInteraction --> Username /' usage? '/
RegisterUserInteraction --> Password /' usage? '/
RegisterUserInteraction --> UsernameValidator /' usage? '/
RegisterUserInteraction --> PasswordValidator /' usage? '/
SelectInteraction "1" *-- StringInput
StringInputInteraction "1" *-- StringInput

ClassLogger "1" o-- Logger
LoggerFactory "1" o-- Logger
LoggerFactory --> LogWriter /' usage? '/
LoggerFactory --> ClassLogger
LoggerFactory --> UserLogger
LoggerFactory --> TimeLogger
LoggerFactory --> LogWriterLoggerAdapter
LoggerFactory --> PrintStreamLogWriter
LogWriterLoggerAdapter "1" o-- Logger
TimeLogger "1" o-- Logger
UserLogger "1" o-- Logger

AdminRights "n" *-- Right
AdminRights --> User /' usage? '/

ApplicationState "1" o-- User
@enduml